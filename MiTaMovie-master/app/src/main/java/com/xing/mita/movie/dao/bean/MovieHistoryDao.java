package com.xing.mita.movie.dao.bean;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.xing.mita.movie.entity.MovieHistory;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MOVIE_HISTORY".
*/
public class MovieHistoryDao extends AbstractDao<MovieHistory, Long> {

    public static final String TABLENAME = "MOVIE_HISTORY";

    /**
     * Properties of entity MovieHistory.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Image = new Property(2, String.class, "image", false, "IMAGE");
        public final static Property Link = new Property(3, String.class, "link", false, "LINK");
        public final static Property SubLink = new Property(4, String.class, "subLink", false, "SUB_LINK");
        public final static Property Episode = new Property(5, String.class, "episode", false, "EPISODE");
        public final static Property Source = new Property(6, String.class, "source", false, "SOURCE");
        public final static Property FinalPlayUrl = new Property(7, String.class, "finalPlayUrl", false, "FINAL_PLAY_URL");
        public final static Property WebSite = new Property(8, String.class, "webSite", false, "WEB_SITE");
        public final static Property Progress = new Property(9, long.class, "progress", false, "PROGRESS");
        public final static Property During = new Property(10, long.class, "during", false, "DURING");
        public final static Property Date = new Property(11, long.class, "date", false, "DATE");
        public final static Property Position = new Property(12, int.class, "position", false, "POSITION");
        public final static Property Type = new Property(13, int.class, "type", false, "TYPE");
    }


    public MovieHistoryDao(DaoConfig config) {
        super(config);
    }
    
    public MovieHistoryDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MOVIE_HISTORY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"NAME\" TEXT," + // 1: name
                "\"IMAGE\" TEXT," + // 2: image
                "\"LINK\" TEXT," + // 3: link
                "\"SUB_LINK\" TEXT," + // 4: subLink
                "\"EPISODE\" TEXT," + // 5: episode
                "\"SOURCE\" TEXT," + // 6: source
                "\"FINAL_PLAY_URL\" TEXT," + // 7: finalPlayUrl
                "\"WEB_SITE\" TEXT," + // 8: webSite
                "\"PROGRESS\" INTEGER NOT NULL ," + // 9: progress
                "\"DURING\" INTEGER NOT NULL ," + // 10: during
                "\"DATE\" INTEGER NOT NULL ," + // 11: date
                "\"POSITION\" INTEGER NOT NULL ," + // 12: position
                "\"TYPE\" INTEGER NOT NULL );"); // 13: type
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MOVIE_HISTORY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, MovieHistory entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String image = entity.getImage();
        if (image != null) {
            stmt.bindString(3, image);
        }
 
        String link = entity.getLink();
        if (link != null) {
            stmt.bindString(4, link);
        }
 
        String subLink = entity.getSubLink();
        if (subLink != null) {
            stmt.bindString(5, subLink);
        }
 
        String episode = entity.getEpisode();
        if (episode != null) {
            stmt.bindString(6, episode);
        }
 
        String source = entity.getSource();
        if (source != null) {
            stmt.bindString(7, source);
        }
 
        String finalPlayUrl = entity.getFinalPlayUrl();
        if (finalPlayUrl != null) {
            stmt.bindString(8, finalPlayUrl);
        }
 
        String webSite = entity.getWebSite();
        if (webSite != null) {
            stmt.bindString(9, webSite);
        }
        stmt.bindLong(10, entity.getProgress());
        stmt.bindLong(11, entity.getDuring());
        stmt.bindLong(12, entity.getDate());
        stmt.bindLong(13, entity.getPosition());
        stmt.bindLong(14, entity.getType());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, MovieHistory entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String image = entity.getImage();
        if (image != null) {
            stmt.bindString(3, image);
        }
 
        String link = entity.getLink();
        if (link != null) {
            stmt.bindString(4, link);
        }
 
        String subLink = entity.getSubLink();
        if (subLink != null) {
            stmt.bindString(5, subLink);
        }
 
        String episode = entity.getEpisode();
        if (episode != null) {
            stmt.bindString(6, episode);
        }
 
        String source = entity.getSource();
        if (source != null) {
            stmt.bindString(7, source);
        }
 
        String finalPlayUrl = entity.getFinalPlayUrl();
        if (finalPlayUrl != null) {
            stmt.bindString(8, finalPlayUrl);
        }
 
        String webSite = entity.getWebSite();
        if (webSite != null) {
            stmt.bindString(9, webSite);
        }
        stmt.bindLong(10, entity.getProgress());
        stmt.bindLong(11, entity.getDuring());
        stmt.bindLong(12, entity.getDate());
        stmt.bindLong(13, entity.getPosition());
        stmt.bindLong(14, entity.getType());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public MovieHistory readEntity(Cursor cursor, int offset) {
        MovieHistory entity = new MovieHistory( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // image
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // link
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // subLink
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // episode
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // source
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // finalPlayUrl
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // webSite
            cursor.getLong(offset + 9), // progress
            cursor.getLong(offset + 10), // during
            cursor.getLong(offset + 11), // date
            cursor.getInt(offset + 12), // position
            cursor.getInt(offset + 13) // type
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, MovieHistory entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setImage(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setLink(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setSubLink(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setEpisode(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setSource(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setFinalPlayUrl(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setWebSite(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setProgress(cursor.getLong(offset + 9));
        entity.setDuring(cursor.getLong(offset + 10));
        entity.setDate(cursor.getLong(offset + 11));
        entity.setPosition(cursor.getInt(offset + 12));
        entity.setType(cursor.getInt(offset + 13));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(MovieHistory entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(MovieHistory entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(MovieHistory entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
