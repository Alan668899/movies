package com.xing.mita.movie.dao.bean;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.xing.mita.movie.entity.Download;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DOWNLOAD".
*/
public class DownloadDao extends AbstractDao<Download, Long> {

    public static final String TABLENAME = "DOWNLOAD";

    /**
     * Properties of entity Download.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Episode = new Property(2, String.class, "episode", false, "EPISODE");
        public final static Property Thumb = new Property(3, String.class, "thumb", false, "THUMB");
        public final static Property Url = new Property(4, String.class, "url", false, "URL");
        public final static Property CacheName = new Property(5, String.class, "cacheName", false, "CACHE_NAME");
        public final static Property Priority = new Property(6, int.class, "priority", false, "PRIORITY");
        public final static Property Status = new Property(7, int.class, "status", false, "STATUS");
    }


    public DownloadDao(DaoConfig config) {
        super(config);
    }
    
    public DownloadDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DOWNLOAD\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"NAME\" TEXT," + // 1: name
                "\"EPISODE\" TEXT," + // 2: episode
                "\"THUMB\" TEXT," + // 3: thumb
                "\"URL\" TEXT," + // 4: url
                "\"CACHE_NAME\" TEXT," + // 5: cacheName
                "\"PRIORITY\" INTEGER NOT NULL ," + // 6: priority
                "\"STATUS\" INTEGER NOT NULL );"); // 7: status
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DOWNLOAD\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Download entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String episode = entity.getEpisode();
        if (episode != null) {
            stmt.bindString(3, episode);
        }
 
        String thumb = entity.getThumb();
        if (thumb != null) {
            stmt.bindString(4, thumb);
        }
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(5, url);
        }
 
        String cacheName = entity.getCacheName();
        if (cacheName != null) {
            stmt.bindString(6, cacheName);
        }
        stmt.bindLong(7, entity.getPriority());
        stmt.bindLong(8, entity.getStatus());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Download entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String episode = entity.getEpisode();
        if (episode != null) {
            stmt.bindString(3, episode);
        }
 
        String thumb = entity.getThumb();
        if (thumb != null) {
            stmt.bindString(4, thumb);
        }
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(5, url);
        }
 
        String cacheName = entity.getCacheName();
        if (cacheName != null) {
            stmt.bindString(6, cacheName);
        }
        stmt.bindLong(7, entity.getPriority());
        stmt.bindLong(8, entity.getStatus());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Download readEntity(Cursor cursor, int offset) {
        Download entity = new Download( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // episode
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // thumb
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // url
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // cacheName
            cursor.getInt(offset + 6), // priority
            cursor.getInt(offset + 7) // status
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Download entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setEpisode(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setThumb(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setUrl(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setCacheName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setPriority(cursor.getInt(offset + 6));
        entity.setStatus(cursor.getInt(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Download entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Download entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Download entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
